<script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.2.0/react.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.2.0/react-dom.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.0/jquery.min.js"></script>
<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/remarkable/1.6.2/remarkable.min.js"></script> -->
<div id="content"></div>

<script type="text/babel">
  var GestoreList = React.createClass({
  render: function() {
  var gestoriNodes = this.props.data.map(function(gestore) {
    return (
      <Gestore name={gestore.name} key={gestore.id} id={gestore.id} pec={gestore.pec} />
    );
  });

    return (
      <table className="table table-bordered">
        <thead>
          <tr>
            <th>ID</th>
            <th>Name</th>
	    <th>PEC</th>
	    <th>Operazioni</th>
	  </tr>
	</thead>
	  <tbody>
	    {gestoriNodes}
	  </tbody>
	</table>
    );
  }
});

var Gestore = React.createClass({
  handleEdit() {
    alert("edit!");
  },
  handleDelete() {
   var lid = this.props.id;

  confirm('Sei sicuro di voler rimuovere?', {
      description: this.props.name,
      confirmLabel: 'Yes',
      abortLabel: 'No'
    }).then(function(value) {
        $.ajax({
	    url: '/gestori/'+lid,
            dataType: 'json',
	    type: 'DELETE',
            success: function(data) {
               // refresh
            }.bind(this),
            error: function(xhr, status, err) {
	       console.error("error deleting, id="+lid, status, err.toString());
            }.bind(this)
        });
    });
  },
  render: function() {
    return (
      <tr>
        <td>{this.props.id}</td>
	<td>{this.props.name}</td>
	<td>{this.props.pec}</td>
	<td>
	  <button type="button" onClick={this.handleEdit}><span className="glyphicon glyphicon-pencil"></span></button>
	  <button type="button" onClick={this.handleDelete}><span className="glyphicon glyphicon-trash"></span></button>
	</td>
      </tr>
    );
  }
});


var GestoreForm = React.createClass({
  getInitialState: function() {
    return {name: '', pec: ''};
  },
  handleNameChange: function(e) {
    this.setState({name: e.target.value});
  },
  handlePECChange: function(e) {
    this.setState({pec: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var name = this.state.name.trim();
    var pec = this.state.pec.trim();
    if (!name || !pec) {
      return;
    }

    this.setState({name: '', pec: ''});
    this.props.onGestoreSubmit({name: name, pec: pec});
  },
  render: function() {
    return (
      <form className="gestoreForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Name"
          value={this.state.name}
          onChange={this.handleNameChange}
	  name="name"
        />
        <input
          type="text"
          placeholder="PEC"
          value={this.state.pec}
          onChange={this.handlePECChange}
	  name="pec"
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

var GestoreBox = React.createClass({
  loadGestoriFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadGestoriFromServer();
    setInterval(this.loadGestoriFromServer, this.props.pollInterval);
  },
  handleGestoreAdd: function(comment) {
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    //var comments = this.state.data;
    //comment.id = Date.now();
    //var newComments = comments.concat([comment]);
    //this.setState({data: newComments});
    
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  render: function() {
    return (
      <div className="gestoreBox">
        <h1>Gestori</h1>
        <GestoreList data={this.state.data} />
	<GestoreForm onGestoreSubmit={this.handleGestoreAdd} />
      </div>
    );
  }
});


//
// confirm start
//
var Modal = React.createClass({
  displayName: 'Modal',
  backdrop: function() {
    return <div className='modal-backdrop in' />;
  },
  modal: function() {
    var style = {display: 'block'};
    return (
      <div
        className='modal in'
        tabIndex='-1'
        role='dialog'
        aria-hidden='false'
        ref='modal'
        style={style}
      >
        <div className='modal-dialog'>
          <div className='modal-content'>
            {this.props.children}
          </div>
        </div>
      </div>
    );
  },

  render: function() {
    return (
      <div>
        {this.backdrop()}
        {this.modal()}
      </div>
    );
  }
});

var Confirm = React.createClass({
  displayName: 'Confirm',
  getDefaultProps: function() {
    return {
      confirmLabel: 'OK',
      abortLabel: 'Cancel'
    };
  },

  abort: function() {
    return this.promise.reject();
  },

  confirm: function() {
    return this.promise.resolve();
  },

  componentDidMount: function() {
    this.promise = new $.Deferred();
    return ReactDOM.findDOMNode(this.refs.confirm).focus();
  },

  render: function() {
    var modalBody;
    if (this.props.description) {
      modalBody = (
        <div className='modal-body'>
          {this.props.description}
        </div>
      );
    }

    return (
      <Modal>
        <div className='modal-header'>
          <h4 className='modal-title'>
            {this.props.message}
          </h4>
        </div>
        {modalBody}
        <div className='modal-footer'>
          <div className='text-right'>
            <button
              role='abort'
              type='button'
              className='btn btn-default'
              onClick={this.abort}
            >
              {this.props.abortLabel}
            </button>
            {' '}
            <button
              role='confirm'
              type='button'
              className='btn btn-primary'
              ref='confirm'
              onClick={this.confirm}
            >
              {this.props.confirmLabel}
            </button>
          </div>
        </div>
      </Modal>
    );
  }
});
 
var confirm = function(message, options) {
  var cleanup, component, props, wrapper;
  if (options == null) {
    options = {};
  }
  props = $.extend({
    message: message
  }, options);
  wrapper = document.body.appendChild(document.createElement('div'));
  component = ReactDOM.render(<Confirm {...props}/>, wrapper);
  cleanup = function() {
    ReactDOM.unmountComponentAtNode(wrapper);
    return setTimeout(function() {
      return wrapper.remove();
    });
  };
  return component.promise.always(cleanup).promise();
};
//
// confirm end
//

  ReactDOM.render(
    <GestoreBox url="/gestori" pollInterval={5000}/>,
    document.getElementById('content')
  );
</script>

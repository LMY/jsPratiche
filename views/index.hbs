<script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.2.0/react.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.2.0/react-dom.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/remarkable/1.6.2/remarkable.min.js"></script>
<div id="content"></div>

<script type="text/babel">
var GestoreList = React.createClass({
  render: function() {
    var gestoriNodes = this.props.data.map(function(gestore) {
      return (
 	<Gestore name={gestore.name} key={gestore.id} id={gestore.id} pec={gestore.pec} />
      );
    });

    return (
      <table className="table table-bordered">
        <thead>
          <tr>
            <th>ID</th>
            <th>Name</th>
	    <th>PEC</th>
	  </tr>
	</thead>
	  <tbody>
	    {gestoriNodes}
	  </tbody>
	</table>
    );
  }
});

var Gestore = React.createClass({
  render: function() {
    return (
      <tr>
        <td>{this.props.id}</td>
	<td>{this.props.name}</td>
	<td>{this.props.pec}</td>
      </tr>
    );
  }
});


var GestoreForm = React.createClass({
  getInitialState: function() {
    return {name: '', pec: ''};
  },
  handleNameChange: function(e) {
    this.setState({name: e.target.value});
  },
  handlePECChange: function(e) {
    this.setState({pec: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var name = this.state.name.trim();
    var pec = this.state.pec.trim();
    if (!name || !pec) {
      return;
    }

    this.setState({name: '', pec: ''});
    this.props.onGestoreSubmit({name: name, pec: pec});
  },
  render: function() {
    return (
      <form className="gestoreForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Name"
          value={this.state.name}
          onChange={this.handleNameChange}
	  name="name"
        />
        <input
          type="text"
          placeholder="Say something..."
          value={this.state.pec}
          onChange={this.handlePECChange}
	  name="pec"
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

var GestoreBox = React.createClass({
  loadGestoriFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadGestoriFromServer();
    setInterval(this.loadGestoriFromServer, this.props.pollInterval);
  },
  handleGestoreSubmit: function(comment) {
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    //var comments = this.state.data;
    //comment.id = Date.now();
    //var newComments = comments.concat([comment]);
    //this.setState({data: newComments});
    
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  render: function() {
    return (
      <div className="gestoreBox">
        <h1>Gestori</h1>
        <GestoreList data={this.state.data} />
	<GestoreForm onGestoreSubmit={this.handleGestoreSubmit} />
      </div>
    );
  }
});



  ReactDOM.render(
    <GestoreBox url="/gestori" pollInterval={5000}/>,
    document.getElementById('content')
  );
</script>